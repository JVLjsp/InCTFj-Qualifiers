from Crypto.Util.number import *
from Crypto.PublicKey import RSA
from sympy import *
from gmpy2 import *
e=65537
n=78448823099576055514414361317662315054325962383563105820765456804663944126101480094518811906000472963835962831013758061692111051241607550849092731437379369044347640203022241971010262069670465388627263720813285059155866651504979066160700686173441572263502395651150476843944960357736597981882527397598286672207
ciphertext=26035374206090425554573123399474110792671472717012159440366752438351791444960048600655243932014365154528338109208693865268746558963882861059734381697720058259967549627281447398521323304902148915982098852180268875987491284916818815691314592130034471238869451370576052353776740150774543150175320794899570456002
#s=p+q
s = 17914012633690460554055012955268971085304705684680616194957652861980944803542815256158706096213147920682083379468184411184051553703586618323015195546600112
print "=========================================Method #1=========================================="
p = Symbol('p')
x=solve(p**2-s*p+n,p)
for i in x:
	p=i
	q=n/p;
	phin = (p-1)*(q-1)
	d = inverse(e,phin)
	plaintext = pow(ciphertext,d,n)
	plaintext = long_to_bytes(plaintext)
	print (plaintext)
print "=========================================Method #2=========================================="
phin=n-s+1
d = inverse(e,phin)
plaintext = pow(ciphertext,d,n)
plaintext = long_to_bytes(plaintext)
print (plaintext)
print "=========================================Method #2=========================================="
#((p+q)**2)-((p-q)**2)=4*p*q
#t=p-q
t=iroot(s**2-4*n,2)[0]
p=(t+s)/2
q=n/p
phin = (p-1)*(q-1)
d = inverse(e,phin)
plaintext = pow(ciphertext,d,n)
plaintext = long_to_bytes(plaintext)
print (plaintext)
