#!/usr/bin/env python
from Crypto.Util.number import *
from Crypto.PublicKey import RSA
from sympy import *
from gmpy2 import *
import math
import os
n= 401641249025114206803827019313784290333768257142030845709201054151366733788130268589230724933697140569012758261587768884115528127810385235868364217523785031547824800698657279106468714874246151378502993181095062840518289613678996954619630391288861576925623331914378573904180202635136998324368781800413221031559011151200670089343839159304449419893443761509968706773934292682758292332011334167996017475408921022261964162540129228586442629731177653269109339263647534220116566090243957411928354758258038933805287870429301299400613731250345127978942623806282407605152099165535059246549221055476879905687571020831766679507839
p = iroot(n/13,2)[0]
for i in range(100):
	if GCD(p-i,n)!=1:
		p= p-i
q = next_prime(13 * p)
ct="060efbf7f610635a72289687e78a057bbd21ebf1f7903e635d7b83acfa96b69a28a839eae55e1d11bc9b4211d2cc98b7853e6613ed8df3f2074af6626bfcc31e6ef0b0ecbc3fe9de294a5e100d0bacd03b65b8e38997d7db74216d2de49e3b7747f51ac0e95e9afa8a8b5bf293832cd82829ccc1bdf605e6c7526a79d819a74b9bfc2707cb6792ece6b705a70c78ff603a3a4a732067df3c4f0a04f71b2789982ddc2d9d810780edae516f253019fafeecbbbaf6bacd7017127653644759f70cf9f550e0ca62ad92ae7027f029750582fdda905d8cffcf23640781c6d11d83932198ec3602b1de78db8a85f31a8e6ce5c42becffd81d6f0889110cc60780aff07d"
ct = int(ct,16)
e = 65537
n = p*q
phin = (p-1)*(q-1)
d = inverse(e,phin)

plaintext = pow(ct,d,n)
plaintext=long_to_bytes(plaintext)
print plaintext